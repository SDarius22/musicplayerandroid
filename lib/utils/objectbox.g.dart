// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../domain/playlist_type.dart';
import '../domain/settings_type.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 1548431000269371768),
      name: 'PlaylistType',
      lastPropertyId: const obx_int.IdUid(4, 6797862587298782757),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8130280995345718625),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3966676650484138265),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5566123394613520116),
            name: 'nextAdded',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6797862587298782757),
            name: 'songs',
            type: 30,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 2184095402233783916),
      name: 'Settings',
      lastPropertyId: const obx_int.IdUid(11, 2849735380084176393),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 233417767558755944),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8420640387145157658),
            name: 'directory',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2292458640762497522),
            name: 'index',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 803192602886725719),
            name: 'firstTime',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 113112589901831095),
            name: 'systemTray',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1315943833169072652),
            name: 'fullClose',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3253185010092296184),
            name: 'appNotifications',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4128978171921845016),
            name: 'deezerARL',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 5128943914420986328),
            name: 'queueAdd',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 2381452106409990259),
            name: 'queuePlay',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 2849735380084176393),
            name: 'queue',
            type: 30,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(2, 2184095402233783916),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    PlaylistType: obx_int.EntityDefinition<PlaylistType>(
        model: _entities[0],
        toOneRelations: (PlaylistType object) => [],
        toManyRelations: (PlaylistType object) => {},
        getId: (PlaylistType object) => object.id,
        setId: (PlaylistType object, int id) {
          object.id = id;
        },
        objectToFB: (PlaylistType object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final nextAddedOffset = fbb.writeString(object.nextAdded);
          final songsOffset = fbb.writeList(
              object.songs.map(fbb.writeString).toList(growable: false));
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, nextAddedOffset);
          fbb.addOffset(3, songsOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = PlaylistType()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..nextAdded = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..songs = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGet(buffer, rootOffset, 10, []);

          return object;
        }),
    Settings: obx_int.EntityDefinition<Settings>(
        model: _entities[1],
        toOneRelations: (Settings object) => [],
        toManyRelations: (Settings object) => {},
        getId: (Settings object) => object.id,
        setId: (Settings object, int id) {
          object.id = id;
        },
        objectToFB: (Settings object, fb.Builder fbb) {
          final directoryOffset = fbb.writeString(object.directory);
          final deezerARLOffset = fbb.writeString(object.deezerARL);
          final queueAddOffset = fbb.writeString(object.queueAdd);
          final queuePlayOffset = fbb.writeString(object.queuePlay);
          final queueOffset = fbb.writeList(
              object.queue.map(fbb.writeString).toList(growable: false));
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, directoryOffset);
          fbb.addInt64(2, object.index);
          fbb.addBool(3, object.firstTime);
          fbb.addBool(4, object.systemTray);
          fbb.addBool(5, object.fullClose);
          fbb.addBool(6, object.appNotifications);
          fbb.addOffset(7, deezerARLOffset);
          fbb.addOffset(8, queueAddOffset);
          fbb.addOffset(9, queuePlayOffset);
          fbb.addOffset(10, queueOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Settings()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..directory = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..index = const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..firstTime =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false)
            ..systemTray =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false)
            ..fullClose =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false)
            ..appNotifications =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false)
            ..deezerARL = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 18, '')
            ..queueAdd = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 20, '')
            ..queuePlay = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 22, '')
            ..queue = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGet(buffer, rootOffset, 24, []);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [PlaylistType] entity fields to define ObjectBox queries.
class PlaylistType_ {
  /// See [PlaylistType.id].
  static final id =
      obx.QueryIntegerProperty<PlaylistType>(_entities[0].properties[0]);

  /// See [PlaylistType.name].
  static final name =
      obx.QueryStringProperty<PlaylistType>(_entities[0].properties[1]);

  /// See [PlaylistType.nextAdded].
  static final nextAdded =
      obx.QueryStringProperty<PlaylistType>(_entities[0].properties[2]);

  /// See [PlaylistType.songs].
  static final songs =
      obx.QueryStringVectorProperty<PlaylistType>(_entities[0].properties[3]);
}

/// [Settings] entity fields to define ObjectBox queries.
class Settings_ {
  /// See [Settings.id].
  static final id =
      obx.QueryIntegerProperty<Settings>(_entities[1].properties[0]);

  /// See [Settings.directory].
  static final directory =
      obx.QueryStringProperty<Settings>(_entities[1].properties[1]);

  /// See [Settings.index].
  static final index =
      obx.QueryIntegerProperty<Settings>(_entities[1].properties[2]);

  /// See [Settings.firstTime].
  static final firstTime =
      obx.QueryBooleanProperty<Settings>(_entities[1].properties[3]);

  /// See [Settings.systemTray].
  static final systemTray =
      obx.QueryBooleanProperty<Settings>(_entities[1].properties[4]);

  /// See [Settings.fullClose].
  static final fullClose =
      obx.QueryBooleanProperty<Settings>(_entities[1].properties[5]);

  /// See [Settings.appNotifications].
  static final appNotifications =
      obx.QueryBooleanProperty<Settings>(_entities[1].properties[6]);

  /// See [Settings.deezerARL].
  static final deezerARL =
      obx.QueryStringProperty<Settings>(_entities[1].properties[7]);

  /// See [Settings.queueAdd].
  static final queueAdd =
      obx.QueryStringProperty<Settings>(_entities[1].properties[8]);

  /// See [Settings.queuePlay].
  static final queuePlay =
      obx.QueryStringProperty<Settings>(_entities[1].properties[9]);

  /// See [Settings.queue].
  static final queue =
      obx.QueryStringVectorProperty<Settings>(_entities[1].properties[10]);
}
