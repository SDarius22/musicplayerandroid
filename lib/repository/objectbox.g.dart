// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'package:musicplayerandroid/domain/album_type.dart';
import 'package:musicplayerandroid/domain/artist_type.dart';
import 'package:musicplayerandroid/domain/playlist_type.dart';
import 'package:musicplayerandroid/domain/settings_type.dart';
import 'package:musicplayerandroid/domain/song_type.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 3634709030078463790),
      name: 'AlbumType',
      lastPropertyId: const obx_int.IdUid(2, 8175132325937032956),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5489699177720281632),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8175132325937032956),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 6741029953709693713),
            name: 'songs',
            targetId: const obx_int.IdUid(5, 2730603594477538205))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 9049650151713376078),
      name: 'ArtistType',
      lastPropertyId: const obx_int.IdUid(2, 5591578751180356995),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4231187271704239549),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5591578751180356995),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(2, 5978960703584812066),
            name: 'songs',
            targetId: const obx_int.IdUid(5, 2730603594477538205))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 5703534120380292786),
      name: 'PlaylistType',
      lastPropertyId: const obx_int.IdUid(4, 1990777040352268297),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6505231938871605741),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5505028910540809440),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6646749768267779196),
            name: 'nextAdded',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1990777040352268297),
            name: 'paths',
            type: 30,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 2417071234762337709),
      name: 'Settings',
      lastPropertyId: const obx_int.IdUid(27, 1352007953147563311),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1986615192336379623),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1762359211960620066),
            name: 'mongoID',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7310529997969853810),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8006268678791394965),
            name: 'password',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5339883943154337034),
            name: 'deviceList',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7760815421655595341),
            name: 'primaryDevice',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 305227556279297703),
            name: 'missingSongs',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7479917155428485196),
            name: 'directory',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 1013010500364929141),
            name: 'firstTime',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 6012332673074525469),
            name: 'systemTray',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 1070606601299722207),
            name: 'fullClose',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 2153157222946761115),
            name: 'appNotifications',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 2764195214698535505),
            name: 'deezerARL',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 8902695438066913496),
            name: 'queueAdd',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 3583146486884794191),
            name: 'queuePlay',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 683159109499351643),
            name: 'index',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 4660322356796043994),
            name: 'slider',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 504855859174824714),
            name: 'repeat',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 2414314116483018872),
            name: 'shuffle',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 3072827745792136725),
            name: 'balance',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 3410676769576457130),
            name: 'speed',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 4369898326989607433),
            name: 'volume',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 7133493988262708599),
            name: 'sleepTimer',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 5060049211128214824),
            name: 'queue',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 1560856305621294064),
            name: 'shuffledQueue',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(26, 5772290315197733870),
            name: 'lightColor',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(27, 1352007953147563311),
            name: 'darkColor',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 2730603594477538205),
      name: 'SongType',
      lastPropertyId: const obx_int.IdUid(10, 8015436713184803812),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8769671902268897677),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4319997558433936414),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2903708643176385423),
            name: 'artists',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4696964429943744069),
            name: 'album',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6709823815854814374),
            name: 'albumArtist',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1774631697686304466),
            name: 'duration',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1344358783323240312),
            name: 'path',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7316413170161279150),
            name: 'lyricsPath',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 1018340975717351571),
            name: 'trackNumber',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 8015436713184803812),
            name: 'discNumber',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(5, 2730603594477538205),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(2, 5978960703584812066),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    AlbumType: obx_int.EntityDefinition<AlbumType>(
        model: _entities[0],
        toOneRelations: (AlbumType object) => [],
        toManyRelations: (AlbumType object) =>
            {obx_int.RelInfo<AlbumType>.toMany(1, object.id): object.songs},
        getId: (AlbumType object) => object.id,
        setId: (AlbumType object, int id) {
          object.id = id;
        },
        objectToFB: (AlbumType object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = AlbumType()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '');
          obx_int.InternalToManyAccess.setRelInfo<AlbumType>(object.songs,
              store, obx_int.RelInfo<AlbumType>.toMany(1, object.id));
          return object;
        }),
    ArtistType: obx_int.EntityDefinition<ArtistType>(
        model: _entities[1],
        toOneRelations: (ArtistType object) => [],
        toManyRelations: (ArtistType object) =>
            {obx_int.RelInfo<ArtistType>.toMany(2, object.id): object.songs},
        getId: (ArtistType object) => object.id,
        setId: (ArtistType object, int id) {
          object.id = id;
        },
        objectToFB: (ArtistType object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ArtistType()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '');
          obx_int.InternalToManyAccess.setRelInfo<ArtistType>(object.songs,
              store, obx_int.RelInfo<ArtistType>.toMany(2, object.id));
          return object;
        }),
    PlaylistType: obx_int.EntityDefinition<PlaylistType>(
        model: _entities[2],
        toOneRelations: (PlaylistType object) => [],
        toManyRelations: (PlaylistType object) => {},
        getId: (PlaylistType object) => object.id,
        setId: (PlaylistType object, int id) {
          object.id = id;
        },
        objectToFB: (PlaylistType object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final nextAddedOffset = fbb.writeString(object.nextAdded);
          final pathsOffset = fbb.writeList(
              object.paths.map(fbb.writeString).toList(growable: false));
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, nextAddedOffset);
          fbb.addOffset(3, pathsOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = PlaylistType()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..nextAdded = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..paths = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGet(buffer, rootOffset, 10, []);

          return object;
        }),
    Settings: obx_int.EntityDefinition<Settings>(
        model: _entities[3],
        toOneRelations: (Settings object) => [],
        toManyRelations: (Settings object) => {},
        getId: (Settings object) => object.id,
        setId: (Settings object, int id) {
          object.id = id;
        },
        objectToFB: (Settings object, fb.Builder fbb) {
          final mongoIDOffset = fbb.writeString(object.mongoID);
          final emailOffset = fbb.writeString(object.email);
          final passwordOffset = fbb.writeString(object.password);
          final deviceListOffset = fbb.writeList(
              object.deviceList.map(fbb.writeString).toList(growable: false));
          final primaryDeviceOffset = fbb.writeString(object.primaryDevice);
          final missingSongsOffset = fbb.writeList(
              object.missingSongs.map(fbb.writeString).toList(growable: false));
          final directoryOffset = fbb.writeString(object.directory);
          final deezerARLOffset = fbb.writeString(object.deezerARL);
          final queueAddOffset = fbb.writeString(object.queueAdd);
          final queuePlayOffset = fbb.writeString(object.queuePlay);
          final queueOffset = fbb.writeList(
              object.queue.map(fbb.writeString).toList(growable: false));
          final shuffledQueueOffset = fbb.writeList(object.shuffledQueue
              .map(fbb.writeString)
              .toList(growable: false));
          fbb.startTable(28);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, mongoIDOffset);
          fbb.addOffset(2, emailOffset);
          fbb.addOffset(3, passwordOffset);
          fbb.addOffset(4, deviceListOffset);
          fbb.addOffset(5, primaryDeviceOffset);
          fbb.addOffset(6, missingSongsOffset);
          fbb.addOffset(7, directoryOffset);
          fbb.addBool(8, object.firstTime);
          fbb.addBool(9, object.systemTray);
          fbb.addBool(10, object.fullClose);
          fbb.addBool(11, object.appNotifications);
          fbb.addOffset(12, deezerARLOffset);
          fbb.addOffset(13, queueAddOffset);
          fbb.addOffset(14, queuePlayOffset);
          fbb.addInt64(15, object.index);
          fbb.addInt64(16, object.slider);
          fbb.addBool(17, object.repeat);
          fbb.addBool(18, object.shuffle);
          fbb.addFloat64(19, object.balance);
          fbb.addFloat64(20, object.speed);
          fbb.addFloat64(21, object.volume);
          fbb.addInt64(22, object.sleepTimer);
          fbb.addOffset(23, queueOffset);
          fbb.addOffset(24, shuffledQueueOffset);
          fbb.addInt64(25, object.lightColor);
          fbb.addInt64(26, object.darkColor);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Settings()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..mongoID = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..email = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..password = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '')
            ..deviceList = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGet(buffer, rootOffset, 12, [])
            ..primaryDevice = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 14, '')
            ..missingSongs = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGet(buffer, rootOffset, 16, [])
            ..directory = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 18, '')
            ..firstTime =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 20, false)
            ..systemTray =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 22, false)
            ..fullClose =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 24, false)
            ..appNotifications =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 26, false)
            ..deezerARL = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 28, '')
            ..queueAdd = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 30, '')
            ..queuePlay = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 32, '')
            ..index =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 34, 0)
            ..slider =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0)
            ..repeat =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 38, false)
            ..shuffle =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 40, false)
            ..balance =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 42, 0)
            ..speed =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 44, 0)
            ..volume =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 46, 0)
            ..sleepTimer =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 48, 0)
            ..queue = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGet(buffer, rootOffset, 50, [])
            ..shuffledQueue = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGet(buffer, rootOffset, 52, [])
            ..lightColor =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 54, 0)
            ..darkColor =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 56, 0);

          return object;
        }),
    SongType: obx_int.EntityDefinition<SongType>(
        model: _entities[4],
        toOneRelations: (SongType object) => [],
        toManyRelations: (SongType object) => {},
        getId: (SongType object) => object.id,
        setId: (SongType object, int id) {
          object.id = id;
        },
        objectToFB: (SongType object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final artistsOffset = fbb.writeString(object.artists);
          final albumOffset = fbb.writeString(object.album);
          final albumArtistOffset = fbb.writeString(object.albumArtist);
          final pathOffset = fbb.writeString(object.path);
          final lyricsPathOffset = fbb.writeString(object.lyricsPath);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, artistsOffset);
          fbb.addOffset(3, albumOffset);
          fbb.addOffset(4, albumArtistOffset);
          fbb.addInt64(5, object.duration);
          fbb.addOffset(6, pathOffset);
          fbb.addOffset(7, lyricsPathOffset);
          fbb.addInt64(8, object.trackNumber);
          fbb.addInt64(9, object.discNumber);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SongType()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..title = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..artists = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..album = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '')
            ..albumArtist = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '')
            ..duration =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)
            ..path = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 16, '')
            ..lyricsPath = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 18, '')
            ..trackNumber =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0)
            ..discNumber =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [AlbumType] entity fields to define ObjectBox queries.
class AlbumType_ {
  /// See [AlbumType.id].
  static final id =
      obx.QueryIntegerProperty<AlbumType>(_entities[0].properties[0]);

  /// See [AlbumType.name].
  static final name =
      obx.QueryStringProperty<AlbumType>(_entities[0].properties[1]);

  /// see [AlbumType.songs]
  static final songs =
      obx.QueryRelationToMany<AlbumType, SongType>(_entities[0].relations[0]);
}

/// [ArtistType] entity fields to define ObjectBox queries.
class ArtistType_ {
  /// See [ArtistType.id].
  static final id =
      obx.QueryIntegerProperty<ArtistType>(_entities[1].properties[0]);

  /// See [ArtistType.name].
  static final name =
      obx.QueryStringProperty<ArtistType>(_entities[1].properties[1]);

  /// see [ArtistType.songs]
  static final songs =
      obx.QueryRelationToMany<ArtistType, SongType>(_entities[1].relations[0]);
}

/// [PlaylistType] entity fields to define ObjectBox queries.
class PlaylistType_ {
  /// See [PlaylistType.id].
  static final id =
      obx.QueryIntegerProperty<PlaylistType>(_entities[2].properties[0]);

  /// See [PlaylistType.name].
  static final name =
      obx.QueryStringProperty<PlaylistType>(_entities[2].properties[1]);

  /// See [PlaylistType.nextAdded].
  static final nextAdded =
      obx.QueryStringProperty<PlaylistType>(_entities[2].properties[2]);

  /// See [PlaylistType.paths].
  static final paths =
      obx.QueryStringVectorProperty<PlaylistType>(_entities[2].properties[3]);
}

/// [Settings] entity fields to define ObjectBox queries.
class Settings_ {
  /// See [Settings.id].
  static final id =
      obx.QueryIntegerProperty<Settings>(_entities[3].properties[0]);

  /// See [Settings.mongoID].
  static final mongoID =
      obx.QueryStringProperty<Settings>(_entities[3].properties[1]);

  /// See [Settings.email].
  static final email =
      obx.QueryStringProperty<Settings>(_entities[3].properties[2]);

  /// See [Settings.password].
  static final password =
      obx.QueryStringProperty<Settings>(_entities[3].properties[3]);

  /// See [Settings.deviceList].
  static final deviceList =
      obx.QueryStringVectorProperty<Settings>(_entities[3].properties[4]);

  /// See [Settings.primaryDevice].
  static final primaryDevice =
      obx.QueryStringProperty<Settings>(_entities[3].properties[5]);

  /// See [Settings.missingSongs].
  static final missingSongs =
      obx.QueryStringVectorProperty<Settings>(_entities[3].properties[6]);

  /// See [Settings.directory].
  static final directory =
      obx.QueryStringProperty<Settings>(_entities[3].properties[7]);

  /// See [Settings.firstTime].
  static final firstTime =
      obx.QueryBooleanProperty<Settings>(_entities[3].properties[8]);

  /// See [Settings.systemTray].
  static final systemTray =
      obx.QueryBooleanProperty<Settings>(_entities[3].properties[9]);

  /// See [Settings.fullClose].
  static final fullClose =
      obx.QueryBooleanProperty<Settings>(_entities[3].properties[10]);

  /// See [Settings.appNotifications].
  static final appNotifications =
      obx.QueryBooleanProperty<Settings>(_entities[3].properties[11]);

  /// See [Settings.deezerARL].
  static final deezerARL =
      obx.QueryStringProperty<Settings>(_entities[3].properties[12]);

  /// See [Settings.queueAdd].
  static final queueAdd =
      obx.QueryStringProperty<Settings>(_entities[3].properties[13]);

  /// See [Settings.queuePlay].
  static final queuePlay =
      obx.QueryStringProperty<Settings>(_entities[3].properties[14]);

  /// See [Settings.index].
  static final index =
      obx.QueryIntegerProperty<Settings>(_entities[3].properties[15]);

  /// See [Settings.slider].
  static final slider =
      obx.QueryIntegerProperty<Settings>(_entities[3].properties[16]);

  /// See [Settings.repeat].
  static final repeat =
      obx.QueryBooleanProperty<Settings>(_entities[3].properties[17]);

  /// See [Settings.shuffle].
  static final shuffle =
      obx.QueryBooleanProperty<Settings>(_entities[3].properties[18]);

  /// See [Settings.balance].
  static final balance =
      obx.QueryDoubleProperty<Settings>(_entities[3].properties[19]);

  /// See [Settings.speed].
  static final speed =
      obx.QueryDoubleProperty<Settings>(_entities[3].properties[20]);

  /// See [Settings.volume].
  static final volume =
      obx.QueryDoubleProperty<Settings>(_entities[3].properties[21]);

  /// See [Settings.sleepTimer].
  static final sleepTimer =
      obx.QueryIntegerProperty<Settings>(_entities[3].properties[22]);

  /// See [Settings.queue].
  static final queue =
      obx.QueryStringVectorProperty<Settings>(_entities[3].properties[23]);

  /// See [Settings.shuffledQueue].
  static final shuffledQueue =
      obx.QueryStringVectorProperty<Settings>(_entities[3].properties[24]);

  /// See [Settings.lightColor].
  static final lightColor =
      obx.QueryIntegerProperty<Settings>(_entities[3].properties[25]);

  /// See [Settings.darkColor].
  static final darkColor =
      obx.QueryIntegerProperty<Settings>(_entities[3].properties[26]);
}

/// [SongType] entity fields to define ObjectBox queries.
class SongType_ {
  /// See [SongType.id].
  static final id =
      obx.QueryIntegerProperty<SongType>(_entities[4].properties[0]);

  /// See [SongType.title].
  static final title =
      obx.QueryStringProperty<SongType>(_entities[4].properties[1]);

  /// See [SongType.artists].
  static final artists =
      obx.QueryStringProperty<SongType>(_entities[4].properties[2]);

  /// See [SongType.album].
  static final album =
      obx.QueryStringProperty<SongType>(_entities[4].properties[3]);

  /// See [SongType.albumArtist].
  static final albumArtist =
      obx.QueryStringProperty<SongType>(_entities[4].properties[4]);

  /// See [SongType.duration].
  static final duration =
      obx.QueryIntegerProperty<SongType>(_entities[4].properties[5]);

  /// See [SongType.path].
  static final path =
      obx.QueryStringProperty<SongType>(_entities[4].properties[6]);

  /// See [SongType.lyricsPath].
  static final lyricsPath =
      obx.QueryStringProperty<SongType>(_entities[4].properties[7]);

  /// See [SongType.trackNumber].
  static final trackNumber =
      obx.QueryIntegerProperty<SongType>(_entities[4].properties[8]);

  /// See [SongType.discNumber].
  static final discNumber =
      obx.QueryIntegerProperty<SongType>(_entities[4].properties[9]);
}
